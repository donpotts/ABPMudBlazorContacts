@using ContactsWebClientMudBlazor.Themes;
@inject IStorageService LocalStorageService

<MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" />
<MudAppBar Color="Color.Inherit">
    @if (!CheckedVariable)
    {
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
    }
    <MudText Class="d-flex mr-8">Contacts</MudText>
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
        <MudTooltip Text="@tooltipText">    
            <MudSwitch T="bool" Class="d-flex justify-content-start " Value="CheckedVariable" ValueChanged="@(e => OnSwitchValueChanged((bool)e))" Color="Color.Secondary" UnCheckedColor="Color.Primary" />
        </MudTooltip>
    </MudHidden>
    <MudSpacer />
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true" IsHiddenChanged="ScreenSizeChanged">
    @if (CheckedVariable)
    {
        <MudToolBar>
            <MudLink Href="/" Class="d-flex px-4" Color="Color.Inherit">Home</MudLink>
                <CascadingAuthenticationState>
                    <AuthorizeView>
                        <MudLink Href="contacts" Class="d-flex px-3" Color="Color.Inherit">Contacts</MudLink>
                    </AuthorizeView>
                </CascadingAuthenticationState>
                <CascadingAuthenticationState>
                    <AuthorizeView>
                        <MudLink Href="contactusers" Class="d-flex px-3" Color="Color.Inherit">Users</MudLink>
                    </AuthorizeView>
                </CascadingAuthenticationState>
                <CascadingAuthenticationState>
                    <AuthorizeView>
                        <Authorized>
                            <MudLink Href="logout" Class="d-flex px-3" Color="Color.Inherit">Logout</MudLink>
                        </Authorized>
                        <NotAuthorized>
                            <MudLink Href="login" Class="d-flex px-3" Color="Color.Inherit">Login</MudLink>
                        </NotAuthorized>
                    </AuthorizeView>
                </CascadingAuthenticationState>
        </MudToolBar>
    }
    </MudHidden>
    <ThemesMenu @bind-ThemingDrawerOpen="_themingDrawerOpen"
            ThemeManager="_themeManager"
            ThemeManagerChanged="ThemeManagerChanged" />

    <MudLink OnClick="@(() => _themingDrawerOpen = true)" Color="Color.Inherit">
        <MudTooltip Arrow="true"
                    Placement="Placement.Left"
                    Text="Themes">
            <MudIcon Icon="@Icons.Material.Outlined.Brush"
                    Color="Color.Inherit"
                    Class="mr-5"/>
        </MudTooltip>
        </MudLink>
    <MudLink Href="https://www.donpotts.com/" Color="Color.Inherit">About</MudLink>
</MudAppBar>
@if (!CheckedVariable)
{
    <MudDrawer @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Docked" Color="Color.Inherit">
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <CascadingAuthenticationState>
            <AuthorizeView>
                <MudNavLink Href="contacts" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person"> Contacts</MudNavLink>
            </AuthorizeView>
        </CascadingAuthenticationState>
        <CascadingAuthenticationState>
            <AuthorizeView>
                <MudNavLink Href="contactusers" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.People"> Users</MudNavLink>
            </AuthorizeView>
        </CascadingAuthenticationState>
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <MudNavLink Href="logout" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DoorBack"> Logout</MudNavLink>
                </Authorized>
                <NotAuthorized>
                    <MudNavLink Href="login" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DoorSliding"> Login</MudNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    </MudDrawer>
}

@code {
    bool _dark = true;
    private bool isDarkMode;
    private MudThemeProvider? mudThemeProvider;
    private bool drawerOpen = true;
    private bool isSwitchChecked;
    private bool CheckedVariable;
    private string tooltipText => isSwitchChecked ? "Top Menu ON" : "Top Menu is OFF";

    private bool _themingDrawerOpen;

    private MudTheme _theme = new();
    private bool _isDarkMode = false;

    private ThemeManagerModel _themeManager = new()
        {
            IsDarkMode = false,
            PrimaryColor = "#594AE2",
        };

    private async Task UpdateThemeManagerLocalStorage()
    {
        await LocalStorageService.SetAsync("themeManager", _themeManager);
    }

    private async Task ThemeManagerChanged(ThemeManagerModel themeManager)
    {
        _themeManager = themeManager;

        _isDarkMode = _themeManager.IsDarkMode;

        _theme = new MudTheme()
            {
                Palette = new PaletteLight()
                {
                    Primary = _themeManager.PrimaryColor,
                    AppbarBackground = _themeManager.PrimaryColor,
                },
                PaletteDark = new PaletteDark()
                {
                    Primary = _themeManager.PrimaryColor,
                }
            };

        await UpdateThemeManagerLocalStorage();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _themeManager = await LocalStorageService.GetAsync<ThemeManagerModel>("themeManager")
            ?? new()
                {
                    IsDarkMode = false,
                    PrimaryColor = "#594AE2",
                };

        await ThemeManagerChanged(_themeManager);

    }

    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    public void ScreenSizeChanged(bool hidden)
    {
        if (hidden)
            CheckedVariable = false;
        else
            CheckedVariable = isSwitchChecked;
    }

    public void OnSwitchValueChanged(bool checkedValue)
    {
        CheckedVariable = checkedValue;
        if (checkedValue)
            isSwitchChecked = true;
        else
            isSwitchChecked = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && mudThemeProvider != null)
        {
            isDarkMode = await mudThemeProvider.GetSystemPreference();
            StateHasChanged();

            await mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
        }
    }

    protected Task OnSystemPreferenceChanged(bool isDarkMode)
    {
        this.isDarkMode = isDarkMode;
        StateHasChanged();

        return Task.CompletedTask;
    }
}
